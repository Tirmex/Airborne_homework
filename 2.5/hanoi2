#include <iostream>
#include <unordered_map>
#include <utility>
#include <cmath>
#include <limits>
 
using namespace std;
 
// Define a custom hash function for std::pair<int, int>
struct hash_pair {
    template <class T1, class T2>
    size_t operator () (const pair<T1, T2>& p) const {
        auto hash1 = hash<T1>{}(p.first);
        auto hash2 = hash<T2>{}(p.second);
        return hash1 ^ hash2;
    }
};
 
// Function to calculate the minimum number of moves for n disks
int hanoi_4_pegs(int n, unordered_map<pair<int, int>, int, hash_pair>& memoization) {
    // Base cases
    if (n == 0) return 0;
    if (n == 1) return 1;
 
    pair<int, int> key = make_pair(n, 4);
 
    // Check if the result is already computed
    if (memoization.find(key) != memoization.end()) {
        return memoization[key];
    }
 
    // Try moving different number of disks to an auxiliary peg
    int min_moves = numeric_limits<int>::max();
    for (int k = 1; k < n; ++k) {
        int moves = 2 * hanoi_4_pegs(k, memoization) + (1 << (n - k)) - 1;
        min_moves = min(min_moves, moves);
    }
 
    // memoization
    memoization[key] = min_moves;
 
    return min_moves;
}
 
int main() {
    int n;
    //cout << "Enter the number of disks: ";
    cin >> n;
 
    unordered_map<pair<int, int>, int, hash_pair> memoization;
    //cout << "Minimum number of moves: " 
    cout << hanoi_4_pegs(n, memoization) << endl;
 
    return 0;
}
